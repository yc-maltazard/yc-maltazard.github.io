<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Hexo + GitHub Pages 搭建个人博客</title>
      <link href="/Hexo-GitHub-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2.html"/>
      <content type="html"><![CDATA[<p>大三的时候曾经趁着阿里云学生优惠的时候购买过一次ECS，在上面用WordPress搭建过一个专门做InfoGraph的博客。随着实习、毕业再到北京工作，工作生活节奏的变化一下子让我无暇顾及博客的更新，挖好的坑没有精力填，域名和空间也相继到期，曾经的Maltazard‘s Studio就这样无声的关掉了。<br><a id="more"></a><br><em>之前的博客虽然关掉了，但是攒下了一批不错的图，如果有机会的话还是会整理一下放出来的。</em><br><img src="http://wx4.sinaimg.cn/large/882470f1ly1foxd6qn6qlj211y0hpqkb.jpg" alt="部分资料截图"></p><p>随着工作学习的不断深入，越来越多的知识、经验都需要积累下来，再加上自己又特别喜欢折腾各种小东西来自娱自乐，这时候才真正意识到了做一个Blog的必要性，记录一下经验，如果能帮助到一些人那就再好不过了。</p><h2 id="开始前的啰嗦"><a href="#开始前的啰嗦" class="headerlink" title="开始前的啰嗦"></a>开始前的啰嗦</h2><p><a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> 是一款基于Node.js的静态博客框架，所占空间极小，而且支持Markdown语言，对于我这种将博客部署在GitHub Pages上的人来说再适合不过了。</p><p>在开始配置之前先交待一下我的工作环境：</p><ul><li>家用台式机Windows 10 1709</li><li>家用笔记本Ubuntu 16.04</li><li>工作笔记本Windows 10 1709</li></ul><p>毕竟工作上还是以MS Office套装为主，Windows系统还是比较<del>方便易用</del>的（说到这里不得不吐槽，Windows上配置MediaWiki差点没把我折腾死，具体搭建过程见相关教程），这篇教程就方便了广大Windows党的朋友们。</p><p><em>配置的过程中可能涉及到很多命令行，不要害怕，只要将命令复制到Windows Powershell中运行就可以了。</em></p><p>好，下面我尽量详细地把搭建过程记录下来。</p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><ul><li><p>安装<a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a>（我们需要通过Git这个版本管理软件来同步文章及相关配置文件）<br>点击进Git的<a href="https://git-scm.com/" target="_blank" rel="noopener">官方网站</a>，下载对应版本的Git安装包进行安装。</p></li><li><p>安装<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a>(Hexo是在Node.js上的开发的博客平台）<br>点击进入Node.js的<a href="https://nodejs.org/en/" target="_blank" rel="noopener">官方网站</a>，下载对应版本的Node.js安装包进行安装。</p></li></ul><p>安装完毕后，打开CMD（命令提示符）输入如下命令来检测是否安装成功：</p><pre><code>git --versionnode -v</code></pre><p>如正确显示相应版本号，则证明已成功安装。<br><img src="http://wx1.sinaimg.cn/mw690/882470f1ly1foxckb9x8uj209i04c0sj.jpg" alt="CMD下查看Git和Node.js的安装情况"></p><h2 id="安装并配置Hexo"><a href="#安装并配置Hexo" class="headerlink" title="安装并配置Hexo"></a>安装并配置Hexo</h2><p>上面的配置成功后，就可以开始安装Hexo了。</p><pre><code>npm install -g hexo-cli</code></pre><p>下一步需要在本地目录中新建一个文件夹来开始我们的配置，比如我在C盘根目录下新建了一个名为Hexo 的文件夹。<br>进入Hexo文件夹，按住<code>Shift</code>并点击鼠标邮件，选择“在此处打开Powershell窗口”，并执行：</p><pre><code>hexo init</code></pre><p>稍微等一会儿，此时，你的<code>C:\Hexo</code>下应该看起来是这个样子的：<br><img src="http://wx2.sinaimg.cn/large/882470f1ly1foxdoo0igbj20oj0emdgc.jpg" alt="C:\Hexo初始化"></p><p>执行：</p><pre><code>npm install</code></pre><p>此时在本地启动Hexo服务，继续在Powershell中执行：</p><pre><code>hexo s</code></pre><p>在浏览器中打开<code>http://localhost:4000/</code>，这个时候应该会出现下图的样子，恭喜你本地配置已经成功了！<br><img src="http://wx3.sinaimg.cn/large/882470f1ly1foxe1j5je6j211y0k6qeq.jpg" alt="Hexo Hello World Page"></p><h2 id="配置并使用GitHub"><a href="#配置并使用GitHub" class="headerlink" title="配置并使用GitHub"></a>配置并使用GitHub</h2><p>Git是版本管理的未来，在第一步中我们已经成功安装了Git，现在来开始配置它。<br>暂且默认大家是有GitHub账号的，如果没有的话可以去注册一个。在使用GitHub Page的时候，需要创建一个仓库（repo）和你的博客相关联。使用 Hexo 的话，对这个 repo 的名字是有要求的，必须是：<code>your_github_username.github.com</code> 格式，对于我来讲，就是<code>yc-maltazard.github.com</code>具体如图所示，由于我的名称已经注册过了，所以会显示重复的错误。<br><img src="http://wx1.sinaimg.cn/large/882470f1ly1foxmxlemohj20lp0gm752.jpg" alt="Creat a New Repo"></p><p>完成这部分后，在Windows下，在开始菜单中打开Git Bash。</p><h3 id="检查SSH-keys的设置"><a href="#检查SSH-keys的设置" class="headerlink" title="检查SSH keys的设置"></a>检查SSH keys的设置</h3><p>我们先检查你电脑上是不是有现有的ssh key：</p><pre><code>cd ~/.ssh</code></pre><p>如果提示“No such file or directory”，跳到3.3，否则继续3.2。</p><h3 id="备份和移除原来的ssh-key设置"><a href="#备份和移除原来的ssh-key设置" class="headerlink" title="备份和移除原来的ssh key设置"></a>备份和移除原来的ssh key设置</h3><p>如果没有跳过这一步，说明之前你的电脑已经配置过Git了，那么需要备份旧的key数据并删除</p><pre><code>$ lsconfig    id_rsa    id_rsa.pub    known_hosts$ mkdir key_backup$ cp id_rsa* key_backup$ rm id_rsa*</code></pre><h3 id="生成新的SSH-Key"><a href="#生成新的SSH-Key" class="headerlink" title="生成新的SSH Key"></a>生成新的SSH Key</h3><p>输入下面的代码，就可以生成新的key文件，我们只需要默认设置就好，所以当需要输入文件名的时候，直接敲回车就好。</p><pre><code>   $ ssh-keygen -t rsa -C &quot;邮件地址@youremail.com&quot;   Generating public/private rsa key pair.   Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):&lt;回车就好&gt;</code></pre><p>然后系统会要你输入加密串（<a href="http://help.github.com/ssh-key-passphrases/" target="_blank" rel="noopener">Passphrase</a>）：</p><pre><code>Enter passphrase (empty for no passphrase):&lt;输入加密串，不填的话加密串为空，直接敲回车&gt;Enter same passphrase again:&lt;再次输入加密串，如不填直接敲回车&gt;</code></pre><p>最后看到这样的界面，就成功设置ssh key了：<br><img src="http://wx1.sinaimg.cn/mw690/882470f1ly1foxfo67aapj20f7084mx7.jpg" alt="ssh-key-set"></p><h3 id="添加SSH-Key到GitHub"><a href="#添加SSH-Key到GitHub" class="headerlink" title="添加SSH Key到GitHub"></a>添加SSH Key到GitHub</h3><p>在本机设置SSH Key之后，需要添加到GitHub上，以完成SSH链接的设置。</p><p>用文本编辑工具打开id_rsa.pub文件，如果看不到这个文件，你需要设置显示隐藏文件。准确的复制这个文件的内容，才能保证设置的成功。</p><p>在GitHub的主页上点击设置按钮，选择SSH Keys项，把复制的内容粘贴进去，然后点击Add Key按钮即可：<br><img src="http://wx4.sinaimg.cn/mw690/882470f1ly1foxfqmbfpmj20fi0b63yz.jpg" alt="ssh-key"></p><h3 id="测试一下"><a href="#测试一下" class="headerlink" title="测试一下"></a>测试一下</h3><p>可以输入下面的命令，看看设置是否成功，<a href="mailto:`git@github.com" target="_blank" rel="noopener">`git@github.com</a>`的部分不要修改：</p><pre><code>$ ssh -T git@github.com</code></pre><p>如果是下面的反应：</p><pre><code>The authenticity of host &#39;github.com (207.97.227.239)&#39; can&#39;t be established.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes/no)?</code></pre><p>不要紧张，输入<code>yes</code>就好，然后会看到：</p><pre><code>Hi &lt;em&gt;username&lt;/em&gt;! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code></pre><h3 id="设置你的账号信息"><a href="#设置你的账号信息" class="headerlink" title="设置你的账号信息"></a>设置你的账号信息</h3><p>现在你已经可以通过SSH链接到GitHub了，还有一些个人信息需要完善的。</p><p>Git会根据用户的名字和邮箱来记录提交。GitHub也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的，名字必须是你的真名，而不是GitHub的昵称，所谓真名，就是你的GitHub个人页面的Username。</p><pre><code>$ git config --global user.name &quot;username&quot;$ git config --global user.email &quot;your_email@youremail.com&quot;</code></pre><p>好了，现在你已经可以成功连接GitHub了。</p><h2 id="配置博客"><a href="#配置博客" class="headerlink" title="配置博客"></a>配置博客</h2><p>我们通过修改 <code>_config.yml</code> 文件来配置博客。下面是我修改的几项参数信息（注意每一项的“:”后面都要保留一个空格，否则会反复报错）：</p><h3 id="填写网站的相关信息"><a href="#填写网站的相关信息" class="headerlink" title="填写网站的相关信息"></a>填写网站的相关信息</h3><pre><code>title: Choose a titlesubtitle: Any subtitle you likedescription: Anything you likeauthor: Your namelanguage: zh-CNtimezone: Asia/Shanghai</code></pre><h3 id="关联GitHub信息"><a href="#关联GitHub信息" class="headerlink" title="关联GitHub信息"></a>关联GitHub信息</h3><pre><code>deploy:type: git # 可以在 Github repository 首页的 \`Clone or download\` 按钮下找到下面的链接repo: https://github.com/your_github_name/your_github_name.github.com.gitbranch: master</code></pre><h3 id="下载Hexo-部署器并配置"><a href="#下载Hexo-部署器并配置" class="headerlink" title="下载Hexo 部署器并配置"></a>下载Hexo 部署器并配置</h3><p>注意，不执行下面第一行的话，可能会报 “ERROR Deployer not found: git” 或者 “ERROR Deployer not found: github” 的错误。</p><pre><code>$ npm install hexo-deployer-git --save$ hexo deploy</code></pre><p>这时在 Github 的仓库里已经可以看见我们的网站目录和文件了。此时在浏览器地址栏键入我们的网址，即：<code>your_github_name.github.io</code> 就可以打开我们博客的主页了。<br>注意第一次打开大概需要10分钟左右的时间才能显示出来，会比较慢，需要耐心等待。</p><h2 id="日常维护操作"><a href="#日常维护操作" class="headerlink" title="日常维护操作"></a>日常维护操作</h2><h3 id="发布新文章"><a href="#发布新文章" class="headerlink" title="发布新文章"></a>发布新文章</h3><ol><li><p>在终端输入下列命令新建一篇文章：</p><p>$ hexo new “post_title”<br><code>new</code>会直接在本地博客文件夹的 <code>/source/_post/</code> 目录下看到我们新建的 markdown 文件。<br>其他模式还包括<code>draft</code>来生产一篇草稿；<code>page</code>生成特殊页面。</p></li><li><p>用 Markdown 编辑器打开文件进行编辑，输入文章内容，保存后准备发布；我使用的是在线MD编辑器<a href="https://stackedit.io" target="_blank" rel="noopener">Stakedit</a>，支持Google Drive的同步，基本满足我的需要了。</p></li><li>使用 Hexo 生成静态网页，并发布到网上：</li></ol><p>每次我们更新了博客后，都需要让 Hexo 重新生成一下静态网页，可以在 <code>public</code> 目录的相应日期下看到生成的文件。（generate 可以缩写为 g，deploy可以缩写为d，其它缩写见 <a href="https://hexo.io/docs/" target="_blank" rel="noopener">Hexo 官方文档</a>。）</p><pre><code>$ hexo generate$ hexo deploy</code></pre><h3 id="删除文章"><a href="#删除文章" class="headerlink" title="删除文章"></a>删除文章</h3><ol><li>去本地博客文件夹的 <code>/source/_post/</code> 目录下删除需要删除的 <code>.md</code> 文件。</li><li>去本地博客文件夹的 <code>public</code> 目录下删除该博文对应的文件夹（会按发布时间归到不同目录下）。</li><li><p>在终端重新生成静态网页并发布。</p><pre><code>$ hexo generate$ hexo deploy</code></pre></li></ol><p>当我们更新博客时发生了任何问题，可以在终端输入下述命令清理并重新生成静态网页：</p><pre><code>$ hexo clean$ hexo g</code></pre><h3 id="其他一些实用的小Tips"><a href="#其他一些实用的小Tips" class="headerlink" title="其他一些实用的小Tips"></a>其他一些实用的小Tips</h3><ul><li><p><strong>博文首页展示长度控制</strong><br>Hexo 博文在首页展示时，“Read More” 或 “阅读更多” 按钮出现的位置是由作者在写文章的时候设定的。只需在文章正文里合适的位置加上 <code>&lt;!-- more --&gt;</code> 此标记之前的正文内容就会成为该文章的简述，显示在首页里。</p><ul><li><strong>Hexo 中的 <code>front-matter</code> 配置</strong><br><code>front-matter</code> 是文件最上方分隔出来的一块 YAML 或 JSON 格式的区域。采用 YAML 格式书写时，<code>Front-matter</code> 以三个短横杠“—”同正文进行分隔，使用 JSON 格式时则是三个分号“;;;”。</li></ul><p><code>front-matter</code> 用于指定文章的一些属性，有：layout（布局），title（标题），date（文件建立日期），updated（文件更新日期），comments（文章评论功能开关），tags（标签（不适用于分页）），categories（分类（不适用于分页）），permalink 覆盖文章网址等。</p></li></ul><p>下面介绍一下其中比较常用的几个：</p><ol><li><p>title &amp; date<br>在 <code>hexo new</code> 的时候会自动生成，当然也可以之后再编辑。</p></li><li><p>tags &amp; categories<br>只有 post 类型的文件是支持 tags 和 categories 的。它们可以类似 java 数组的形式来表示，也可以分多行以短横杠开头来表示：<br><code>`</code></p></li></ol><hr><p>xxx: xxx<br>tags:</p><ul><li>Github</li><li>Hexo</li><li>Blog<br>categories:</li><li>How To</li><li>Hexo</li></ul><hr><pre><code>如上填写完这两个属性，在 `hexo g` 的时候就会自动生成相应的标签和分类。如果所使用的 Hexo 主题的侧边栏有这两个模块，或者主题有相应的页面，就可以看到相应的生成结果被展示出来（下图是 Maupassant 主题自动生成的侧边栏 tags 和 categories 效果）。 3. tags &amp; categoriesHexo 默认不开启文章目录，若想要某篇文章根据标题权重自动生成目录显示在最右边，可以在 `front-matter` 中开启:</code></pre><hr><p>xxx: xxx</p><h2 id="toc-true"><a href="#toc-true" class="headerlink" title="toc: true"></a>toc: true</h2><p><code>`</code></p><ol><li>特殊页面<br>按照默认配置，会有：“首页”、“归档”、“关于”、“订阅”四个 Tab，其中“首页”和“归档”是自动生成的，“关于”和“订阅”要生成一下，不然会找不到网页。</li></ol><ul><li><p>生成“关于”页面，最简单的方法是：</p><pre><code>$ hexo new page about</code></pre></li></ul><p>可以看见 <code>source</code> 目录下生成了 <code>about</code> 目录，此目录下的 <code>index.md</code> 文件就是“关于”页面了，大家可以根据自己的需要进行编辑。</p><p>想要添加其它页面，重复上述步骤即可。另一种生成页面的方法是： 在 <code>source</code> 目录下建立同所要生成的页面名字一样的文件夹，在其中创建 <code>index.md</code> 文件，并在 <code>index.md</code> 的 <code>front-matter</code> 中设置 <code>layout</code> 为 <code>layout: page</code>。若需要单栏页面，就将 <code>layout</code> 设置为 <code>layout: single-column</code>。</p><h2 id="Hexo的优化"><a href="#Hexo的优化" class="headerlink" title="Hexo的优化"></a>Hexo的优化</h2><p>【2018年3月5日更新】</p><h3 id="图片的优化-amp-工具选择"><a href="#图片的优化-amp-工具选择" class="headerlink" title="图片的优化&amp;工具选择"></a>图片的优化&amp;工具选择</h3><p>在博客搭建起来反复调试的过程中，总觉得对加载速度有些不满意。尤其从图片的加载上可以看出，等待一张图片完整加载出来要3-4s的时间。查了一些资料，现将最终选择的图片优化方案记录下来。</p><h4 id="图片格式的选择"><a href="#图片格式的选择" class="headerlink" title="图片格式的选择"></a>图片格式的选择</h4><table><thead><tr><th>图片格式</th><th>适用</th><th>不适用</th><th>压缩情况</th></tr></thead><tbody><tr><td><code>JPEG</code></td><td>无透明效果、颜色丰富的图片</td><td>文字、线条较多，需要呈现细节的图片</td><td>有损</td></tr><tr><td><code>PNG</code></td><td>需要透明效果、色块连续、多纯色的图片</td><td>颜色丰富的图片大小大于<code>JPEG</code>格式</td><td>有损、无损</td></tr><tr><td><code>GIF</code></td><td>支持动画</td><td>只支持256色</td><td>无损</td></tr><tr><td><code>WebP</code></td><td>同等条件下全面优于<code>PNG</code>,同时支持动画</td><td>目前只有Chrome和Opera浏览器可用</td><td>有损、无损</td></tr></tbody></table><p>文件格式依照上表按需选择。</p><h4 id="图片压缩工具"><a href="#图片压缩工具" class="headerlink" title="图片压缩工具"></a>图片压缩工具</h4><ul><li><a href="https://tinypng.com/" target="_blank" rel="noopener">TinyPNG</a>：<code>PNG</code> 格式图片 <strong>在线压缩网站</strong></li><li><a href="http://www.nullice.com/limitPNG/" target="_blank" rel="noopener">limitPND</a>：优秀的极限 <code>PNG</code> 图片压缩 <strong>软件</strong></li><li><a href="https://isparta.github.io/" target="_blank" rel="noopener">iSparta</a>：开源的 <code>PNG</code> 压缩与格式转换工具</li><li><a href="https://zhitu.isux.us/" target="_blank" rel="noopener">智图</a>：高效优质的图片压缩平台，亦有桌面端软件</li></ul><p>具体几种图片压缩工具的特点整理记录如下：</p><ul><li>格式转换首选：<strong>iSparta</strong><ul><li>此软件可将 <code>PNG</code> 格式转换为 <code>WebP</code>, <code>APNG</code> 格式的图片，具有其他软件没有的功能</li><li>图片压缩能力一般，某些界面没有进度提示</li></ul></li><li>普通需求首选：<strong>limitPNG</strong><ul><li>界面赏心悦目，交互简易方便</li><li>压缩能力超强！可供选项较多，分无损和有损等等很多细分选项</li><li>极低画质压缩能力稍弱</li></ul></li><li>极普通需求，又不想下载软件首选：<strong>TinyPNG</strong><ul><li>在线无损压缩</li><li>缺点就是无法选择输出质量</li><li>如果你只是想稍微无损压缩一下一张图片，那么可以选这个了</li></ul></li><li>最终选择：<strong>智图</strong><ul><li>客户端界面美观、交互也简便</li><li>压缩能力超强，支持 10~95 等 14 级压缩选项</li><li>多图片操作亦方便</li><li>可“递归压缩” –> 不断压缩同一张图片直至很小很小，上面其他软件最低质量有所保留</li><li>支持图片格式自动转换：根据图片内容自动转换为合适的格式<h3 id="HTML-JS-CSS-amp-Image-压缩插件"><a href="#HTML-JS-CSS-amp-Image-压缩插件" class="headerlink" title="HTML, JS, CSS &amp; Image 压缩插件"></a>HTML, JS, CSS &amp; Image 压缩插件</h3>Hexo 的插件 <a href="https://github.com/chenzhutian/hexo-all-minifier" target="_blank" rel="noopener">hexo-all-minifier</a>可以用于压缩网站上调用的 <code>js, css</code> 以及图片的大小，具体安装方法见官方文档。成功加载该插件后，hexo的generate过程会增加一些时间，压缩效果还是不错的。<h2 id="加在最后"><a href="#加在最后" class="headerlink" title="加在最后"></a>加在最后</h2>这几天翻了不少Hexo的文档，发现这个东西可以折腾的地方还是挺多的，后续慢慢再添加，先把架子搭起来，养成写博客的习惯才是重要的。</li></ul></li></ul><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>[1] 代码咖啡. <a href="http://www.jianshu.com/p/e99ed60390a8" target="_blank" rel="noopener">20 分钟教你使用 hexo 搭建 github 博客</a>，Oct. 2016<br>[2] Jamie Paton. <a href="http://jdpaton.github.io/2012/11/05/setup-hexo/" target="_blank" rel="noopener">Setting up a Github Pages blog with Hexo</a>，Nov. 2012<br>[3] 沸沸腾. <a href="https://www.jianshu.com/p/863f3f2d1733" target="_blank" rel="noopener">使用github+Hexo人人都能拥有一个美美的博客</a>， Nov. 2015<br>[4] 李科慧. <a href="https://cloud.tencent.com/developer/article/1004760" target="_blank" rel="noopener">使用 Github 和 Hexo 快速搭建个人博客</a>， Jun. 2017<br>[5] rosu. <a href="https://blog.rosuh.me/2017/08/Introduction-to-optimize-hexo-blog/" target="_blank" rel="noopener">Hexo 博客优化入门</a>，Aug. 2017</p><blockquote><p>Written with <a href="https://stackedit.io/" target="_blank" rel="noopener">StackEdit</a>.</p></blockquote>]]></content>
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/hello-world.html"/>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
  
  
</search>
